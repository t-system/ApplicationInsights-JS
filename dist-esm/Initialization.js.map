{"version":3,"file":"Initialization.js.map","sources":["Initialization.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { AppInsightsCore, LoggingSeverity, _InternalMessageId, hasWindow, hasDocument, isReactNative, doPerf, objForEachKey, proxyAssign, arrForEach, isString, isFunction, isNullOrUndefined, isArray, throwError, addPageUnloadEventListener, addPageHideEventListener } from \"@microsoft/applicationinsights-core-js\";\nimport { ApplicationInsights } from \"@microsoft/applicationinsights-analytics-js\";\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\nimport { Util, CorrelationIdHelper, UrlHelper, DateTimeUtils, ConnectionStringParser, RequestHeaders, DisabledPropertyName, ProcessLegacy, SampleRate, HttpMethod, DEFAULT_BREEZE_ENDPOINT, AIData, AIBase, Envelope, Event, Exception, Metric, PageView, PageViewData, RemoteDependencyData, Trace, PageViewPerformance, Data, SeverityLevel, ConfigurationManager, ContextTagKeys, DataSanitizer, TelemetryItemCreator, CtxTagKeys, Extensions, DistributedTracingModes, PropertiesPluginIdentifier, BreezeChannelIdentifier, AnalyticsPluginIdentifier, parseConnectionString } from \"@microsoft/applicationinsights-common\";\n\"use strict\";\nvar _internalSdkSrc;\n// This is an exclude list of properties that should not be updated during initialization\n// They include a combination of private and internal property names\nvar _ignoreUpdateSnippetProperties = [\n    \"snippet\", \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"\n];\n// Re-exposing the Common classes as Telemetry, the list was taken by reviewing the generated code for the build while using\n// the previous configuration :-\n// import * as Common from \"@microsoft/applicationinsights-common\"\n// export const Telemetry = Common;\nvar fieldType = {\n    Default: 0 /* Default */,\n    Required: 1 /* Required */,\n    Array: 2 /* Array */,\n    Hidden: 4 /* Hidden */\n};\n/**\n * Telemetry type classes, e.g. PageView, Exception, etc\n */\nexport var Telemetry = {\n    __proto__: null,\n    PropertiesPluginIdentifier: PropertiesPluginIdentifier,\n    BreezeChannelIdentifier: BreezeChannelIdentifier,\n    AnalyticsPluginIdentifier: AnalyticsPluginIdentifier,\n    Util: Util,\n    CorrelationIdHelper: CorrelationIdHelper,\n    UrlHelper: UrlHelper,\n    DateTimeUtils: DateTimeUtils,\n    ConnectionStringParser: ConnectionStringParser,\n    FieldType: fieldType,\n    RequestHeaders: RequestHeaders,\n    DisabledPropertyName: DisabledPropertyName,\n    ProcessLegacy: ProcessLegacy,\n    SampleRate: SampleRate,\n    HttpMethod: HttpMethod,\n    DEFAULT_BREEZE_ENDPOINT: DEFAULT_BREEZE_ENDPOINT,\n    AIData: AIData,\n    AIBase: AIBase,\n    Envelope: Envelope,\n    Event: Event,\n    Exception: Exception,\n    Metric: Metric,\n    PageView: PageView,\n    PageViewData: PageViewData,\n    RemoteDependencyData: RemoteDependencyData,\n    Trace: Trace,\n    PageViewPerformance: PageViewPerformance,\n    Data: Data,\n    SeverityLevel: SeverityLevel,\n    ConfigurationManager: ConfigurationManager,\n    ContextTagKeys: ContextTagKeys,\n    DataSanitizer: DataSanitizer,\n    TelemetryItemCreator: TelemetryItemCreator,\n    CtxTagKeys: CtxTagKeys,\n    Extensions: Extensions,\n    DistributedTracingModes: DistributedTracingModes\n};\n/**\n * Application Insights API\n * @class Initialization\n * @implements {IApplicationInsights}\n */\nvar Initialization = /** @class */ (function () {\n    function Initialization(snippet) {\n        var _self = this;\n        // initialize the queue and config in case they are undefined\n        _self._snippetVersion = \"\" + (snippet.sv || snippet.version || \"\");\n        snippet.queue = snippet.queue || [];\n        snippet.version = snippet.version || 2.0; // Default to new version\n        var config = snippet.config || {};\n        if (config.connectionString) {\n            var cs = parseConnectionString(config.connectionString);\n            var ingest = cs.ingestionendpoint;\n            config.endpointUrl = ingest ? \"\".concat(ingest, \"/v2/track\") : config.endpointUrl; // only add /v2/track when from connectionstring\n            config.instrumentationKey = cs.instrumentationkey || config.instrumentationKey;\n        }\n        _self.appInsights = new ApplicationInsights();\n        _self.properties = new PropertiesPlugin();\n        _self.dependencies = new DependenciesPlugin();\n        _self.core = new AppInsightsCore();\n        _self._sender = new Sender();\n        _self.snippet = snippet;\n        _self.config = config;\n        _self.getSKUDefaults();\n    }\n    // Analytics Plugin\n    /**\n     * Get the current cookie manager for this instance\n     */\n    Initialization.prototype.getCookieMgr = function () {\n        return this.appInsights.getCookieMgr();\n    };\n    /**\n     * Log a user action or other occurrence.\n     * @param {IEventTelemetry} event\n     * @param {ICustomProperties} [customProperties]\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackEvent = function (event, customProperties) {\n        this.appInsights.trackEvent(event, customProperties);\n    };\n    /**\n     * Logs that a page, or similar container was displayed to the user.\n     * @param {IPageViewTelemetry} pageView\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackPageView = function (pageView) {\n        var inPv = pageView || {};\n        this.appInsights.trackPageView(inPv);\n    };\n    /**\n     * Log a bag of performance information via the customProperties field.\n     * @param {IPageViewPerformanceTelemetry} pageViewPerformance\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackPageViewPerformance = function (pageViewPerformance) {\n        var inPvp = pageViewPerformance || {};\n        this.appInsights.trackPageViewPerformance(inPvp);\n    };\n    /**\n     * Log an exception that you have caught.\n     * @param {IExceptionTelemetry} exception\n     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackException = function (exception, customProperties) {\n        if (exception && !exception.exception && exception.error) {\n            exception.exception = exception.error;\n        }\n        this.appInsights.trackException(exception, customProperties);\n    };\n    /**\n     * Manually send uncaught exception telemetry. This method is automatically triggered\n     * on a window.onerror event.\n     * @param {IAutoExceptionTelemetry} exception\n     * @memberof Initialization\n     */\n    Initialization.prototype._onerror = function (exception) {\n        this.appInsights._onerror(exception);\n    };\n    /**\n     * Log a diagnostic scenario such entering or leaving a function.\n     * @param {ITraceTelemetry} trace\n     * @param {ICustomProperties} [customProperties]\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackTrace = function (trace, customProperties) {\n        this.appInsights.trackTrace(trace, customProperties);\n    };\n    /**\n     * Log a numeric value that is not associated with a specific event. Typically used\n     * to send regular reports of performance indicators.\n     *\n     * To send a single measurement, just use the `name` and `average` fields\n     * of {@link IMetricTelemetry}.\n     *\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\n     * aggregating multiple measurements and sending the resulting average and modifying\n     * the `sampleCount` field of {@link IMetricTelemetry}.\n     * @param {IMetricTelemetry} metric input object argument. Only `name` and `average` are mandatory.\n     * @param {ICustomProperties} [customProperties]\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackMetric = function (metric, customProperties) {\n        this.appInsights.trackMetric(metric, customProperties);\n    };\n    /**\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\n     * and send the event.\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\n     */\n    Initialization.prototype.startTrackPage = function (name) {\n        this.appInsights.startTrackPage(name);\n    };\n    /**\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\n     */\n    Initialization.prototype.stopTrackPage = function (name, url, customProperties, measurements) {\n        this.appInsights.stopTrackPage(name, url, customProperties, measurements);\n    };\n    Initialization.prototype.startTrackEvent = function (name) {\n        this.appInsights.startTrackEvent(name);\n    };\n    /**\n     * Log an extended event that you started timing with `startTrackEvent`.\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\n     */\n    Initialization.prototype.stopTrackEvent = function (name, properties, measurements) {\n        this.appInsights.stopTrackEvent(name, properties, measurements); // Todo: Fix to pass measurements once type is updated\n    };\n    Initialization.prototype.addTelemetryInitializer = function (telemetryInitializer) {\n        return this.appInsights.addTelemetryInitializer(telemetryInitializer);\n    };\n    // Properties Plugin\n    /**\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\n     *\n     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`\n     * @param {string} authenticatedUserId\n     * @param {string} [accountId]\n     * @param {boolean} [storeInCookie=false]\n     * @memberof Initialization\n     */\n    Initialization.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\n        if (storeInCookie === void 0) { storeInCookie = false; }\n        this.properties.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\n    };\n    /**\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\n     * @memberof Initialization\n     */\n    Initialization.prototype.clearAuthenticatedUserContext = function () {\n        this.properties.context.user.clearAuthenticatedUserContext();\n    };\n    // Dependencies Plugin\n    /**\n     * Log a dependency call (e.g. ajax)\n     * @param {IDependencyTelemetry} dependency\n     * @memberof Initialization\n     */\n    Initialization.prototype.trackDependencyData = function (dependency) {\n        this.dependencies.trackDependencyData(dependency);\n    };\n    // Misc\n    /**\n     * Manually trigger an immediate send of all telemetry still in the buffer.\n     * @param {boolean} [async=true]\n     * @memberof Initialization\n     */\n    Initialization.prototype.flush = function (async) {\n        var _this = this;\n        if (async === void 0) { async = true; }\n        doPerf(this.core, function () { return \"AISKU.flush\"; }, function () {\n            arrForEach(_this.core.getTransmissionControls(), function (channels) {\n                arrForEach(channels, function (channel) {\n                    channel.flush(async);\n                });\n            });\n        }, null, async);\n    };\n    /**\n     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\n     * Fall back to xhr sender if beacon is not supported.\n     * @param {boolean} [async=true]\n     * @memberof Initialization\n     */\n    Initialization.prototype.onunloadFlush = function (async) {\n        if (async === void 0) { async = true; }\n        arrForEach(this.core.getTransmissionControls(), function (channels) {\n            arrForEach(channels, function (channel) {\n                if (channel.onunloadFlush) {\n                    channel.onunloadFlush();\n                }\n                else {\n                    channel.flush(async);\n                }\n            });\n        });\n    };\n    /**\n     * Initialize this instance of ApplicationInsights\n     * @returns {IApplicationInsights}\n     * @memberof Initialization\n     */\n    Initialization.prototype.loadAppInsights = function (legacyMode, logger, notificationManager) {\n        var _this = this;\n        if (legacyMode === void 0) { legacyMode = false; }\n        var _self = this;\n        function _updateSnippetProperties(snippet) {\n            if (snippet) {\n                var snippetVer = \"\";\n                if (!isNullOrUndefined(_self._snippetVersion)) {\n                    snippetVer += _self._snippetVersion;\n                }\n                if (legacyMode) {\n                    snippetVer += \".lg\";\n                }\n                if (_self.context && _self.context.internal) {\n                    _self.context.internal.snippetVer = snippetVer || \"-\";\n                }\n                // apply updated properties to the global instance (snippet)\n                objForEachKey(_self, function (field, value) {\n                    if (isString(field) &&\n                        !isFunction(value) &&\n                        field && field[0] !== \"_\" && // Don't copy \"internal\" values\n                        _ignoreUpdateSnippetProperties.indexOf(field) === -1) {\n                        snippet[field] = value;\n                    }\n                });\n            }\n        }\n        // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!\n        if (legacyMode && _self.config.extensions && _self.config.extensions.length > 0) {\n            throwError(\"Extensions not allowed in legacy mode\");\n        }\n        doPerf(_self.core, function () { return \"AISKU.loadAppInsights\"; }, function () {\n            var extensions = [];\n            extensions.push(_self._sender);\n            extensions.push(_self.properties);\n            extensions.push(_self.dependencies);\n            extensions.push(_self.appInsights);\n            // initialize core\n            _self.core.initialize(_self.config, extensions, logger, notificationManager);\n            _self.context = _self.properties.context;\n            if (_internalSdkSrc && _self.context) {\n                _self.context.internal.sdkSrc = _internalSdkSrc;\n            }\n            _updateSnippetProperties(_self.snippet);\n            // Empty queue of all api calls logged prior to sdk download\n            _self.emptyQueue();\n            _self.pollInternalLogs();\n            _self.addHousekeepingBeforeUnload(_this);\n        });\n        return _self;\n    };\n    /**\n     * Overwrite the lazy loaded fields of global window snippet to contain the\n     * actual initialized API methods\n     * @param {Snippet} snippet\n     * @memberof Initialization\n     */\n    Initialization.prototype.updateSnippetDefinitions = function (snippet) {\n        // apply full appInsights to the global instance\n        // Note: This must be called before loadAppInsights is called\n        proxyAssign(snippet, this, function (name) {\n            // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\n            return name && _ignoreUpdateSnippetProperties.indexOf(name) === -1;\n        });\n    };\n    /**\n     * Call any functions that were queued before the main script was loaded\n     * @memberof Initialization\n     */\n    Initialization.prototype.emptyQueue = function () {\n        var _self = this;\n        // call functions that were queued before the main script was loaded\n        try {\n            if (isArray(_self.snippet.queue)) {\n                // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\n                var length_1 = _self.snippet.queue.length;\n                for (var i = 0; i < length_1; i++) {\n                    var call = _self.snippet.queue[i];\n                    call();\n                }\n                _self.snippet.queue = undefined;\n                delete _self.snippet.queue;\n            }\n        }\n        catch (exception) {\n            var properties = {};\n            if (exception && isFunction(exception.toString)) {\n                properties.exception = exception.toString();\n            }\n            // need from core\n            // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\n            //     LoggingSeverity.WARNING,\n            //     _InternalMessageId.FailedToSendQueuedTelemetry,\n            //     \"Failed to send queued telemetry\",\n            //     properties);\n        }\n    };\n    Initialization.prototype.pollInternalLogs = function () {\n        this.core.pollInternalLogs();\n    };\n    Initialization.prototype.stopPollingInternalLogs = function () {\n        this.core.stopPollingInternalLogs();\n    };\n    Initialization.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {\n        // Add callback to push events when the user navigates away\n        if (hasWindow() || hasDocument()) {\n            var performHousekeeping = function () {\n                // Adds the ability to flush all data before the page unloads.\n                // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\n                // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\n                // Telemetry here will help us analyze how effective this approach is.\n                // Another approach would be to make this call sync with a acceptable timeout to reduce the\n                // impact on user experience.\n                // appInsightsInstance.context._sender.triggerSend();\n                appInsightsInstance.onunloadFlush(false);\n                // Back up the current session to local storage\n                // This lets us close expired sessions after the cookies themselves expire\n                arrForEach(appInsightsInstance.appInsights.core[\"_extensions\"], function (ext) {\n                    if (ext.identifier === PropertiesPluginIdentifier) {\n                        if (ext && ext.context && ext.context._sessionManager) {\n                            ext.context._sessionManager.backup();\n                        }\n                        return -1;\n                    }\n                });\n            };\n            var added = false;\n            var excludePageUnloadEvents = appInsightsInstance.appInsights.config.disablePageUnloadEvents;\n            if (!appInsightsInstance.appInsights.config.disableFlushOnBeforeUnload) {\n                // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\n                // As just hooking the window does not always fire (on chrome) for page navigation's.\n                added = addPageUnloadEventListener(performHousekeeping, excludePageUnloadEvents);\n                // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\n                added = addPageHideEventListener(performHousekeeping, excludePageUnloadEvents) || added;\n                // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\n                // log the failure in this case\n                if (!added && !isReactNative()) {\n                    appInsightsInstance.appInsights.core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToAddHandlerForOnBeforeUnload, \"Could not add handler for beforeunload and pagehide\");\n                }\n            }\n            if (!added && !appInsightsInstance.appInsights.config.disableFlushOnUnload) {\n                // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\n                addPageHideEventListener(performHousekeeping, excludePageUnloadEvents);\n            }\n        }\n    };\n    Initialization.prototype.getSender = function () {\n        return this._sender;\n    };\n    Initialization.prototype.getSKUDefaults = function () {\n        var _self = this;\n        _self.config.diagnosticLogInterval =\n            _self.config.diagnosticLogInterval && _self.config.diagnosticLogInterval > 0 ? _self.config.diagnosticLogInterval : 10000;\n    };\n    return Initialization;\n}());\nexport { Initialization };\n// tslint:disable-next-line\n(function () {\n    var sdkSrc = null;\n    var isModule = false;\n    var cdns = [\n        \"://js.monitor.azure.com/\",\n        \"://az416426.vo.msecnd.net/\"\n    ];\n    try {\n        // Try and determine whether the sdk is being loaded from the CDN\n        // currentScript is only valid during initial processing\n        var scrpt = (document || {}).currentScript;\n        if (scrpt) {\n            sdkSrc = scrpt.src;\n            // } else {\n            //     // We need to update to at least typescript 2.9 for this to work :-(\n            //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\n            //     let meta = import.meta;\n            //     sdkSrc = (meta || {}).url;\n            //     isModule = true;\n        }\n    }\n    catch (e) {\n        // eslint-disable-next-line no-empty\n    }\n    if (sdkSrc) {\n        try {\n            var url = sdkSrc.toLowerCase();\n            if (url) {\n                var src = \"\";\n                for (var idx = 0; idx < cdns.length; idx++) {\n                    if (url.indexOf(cdns[idx]) !== -1) {\n                        src = \"cdn\" + (idx + 1);\n                        if (url.indexOf(\"/scripts/\") === -1) {\n                            if (url.indexOf(\"/next/\") !== -1) {\n                                src += \"-next\";\n                            }\n                            else if (url.indexOf(\"/beta/\") !== -1) {\n                                src += \"-beta\";\n                            }\n                        }\n                        _internalSdkSrc = src + (isModule ? \".mod\" : \"\");\n                        break;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            // eslint-disable-next-line no-empty\n        }\n    }\n})();\n//# sourceMappingURL=Initialization.js.map"],"names":[],"mappings":";;;;AAA4D;AAC1B;AACl}