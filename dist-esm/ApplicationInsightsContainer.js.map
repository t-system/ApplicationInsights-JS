{"version":3,"file":"ApplicationInsightsContainer.js.map","sources":["ApplicationInsightsContainer.js"],"sourcesContent":["import { AppInsightsDeprecated } from \"./ApplicationInsightsDeprecated\";\nimport { Initialization as ApplicationInsights } from \"./Initialization\";\nimport { _legacyCookieMgr } from \"@microsoft/applicationinsights-core-js\";\nvar ApplicationInsightsContainer = /** @class */ (function () {\n    function ApplicationInsightsContainer() {\n    }\n    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\n        var initialization = new ApplicationInsights(snippet);\n        var legacyMode = version !== 2.0 ? true : false;\n        // Side effect is to create, initialize and listen to the CoreUtils._canUseCookies changes\n        // Called here to support backward compatibility\n        _legacyCookieMgr();\n        // Two target scenarios:\n        // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\n        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\n        // and all api signatures are expected to map to new SDK. Note new snippet specifies version\n        if (version === 2.0) {\n            initialization.updateSnippetDefinitions(snippet);\n            initialization.loadAppInsights(legacyMode);\n            return initialization; // default behavior with new snippet\n        }\n        else {\n            var legacy = new AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint\n            legacy.updateSnippetDefinitions(snippet);\n            initialization.loadAppInsights(legacyMode);\n            return legacy;\n        }\n    };\n    return ApplicationInsightsContainer;\n}());\nexport { ApplicationInsightsContainer };\n//# sourceMappingURL=ApplicationInsightsContainer.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}